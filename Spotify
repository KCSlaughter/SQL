# In this project I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

# Finally I used SQL to answer various questions about today's most popular music

#1. How many tracks did each performer record that reached a popularity score more than 89?
SELECT COUNT(track_name)
, artist_name
, popularity
FROM Spotifydata
WHERE popularity>89
GROUP BY artist_name;

#2. What are the names of those tracks?
SELECT track_name
, artist_name
, popularity
FROM Spotifydata
WHERE popularity>89
ORDER BY artist_name

#3. What are the top 20 most popular songs and their artists?
SELECT track_name
, artist_name
, popularity
FROM Spotifydata
ORDER BY popularity desc
LIMIT 20

#4. Divide the songs into cases describing three rankings of popularity
SELECT artist_name, track_name, popularity,
CASE WHEN popularity>90 THEN '1_popular' 
    WHEN popularity>80 THEN '2_liked'
    ELSE '3_unpopular'
END 'popularity_ranking'
FROM Spotifydata
ORDER BY popularity_ranking asc; 

#5. What is the song with the slowest tempo?
SELECT MIN(tempo), artist_name, track_name
FROM Spotifydata
;

#6. What is the average popularity of the artists?
SELECT artist_name, AVG(popularity) AS average_popularity
FROM temp_table
GROUP BY artist_name
ORDER BY popularity desc;

#7. Show the name and popularity for every artist with popularity >= 90 label them as "top star" using a CTE.
WITH popularity_average_CTE AS (
SELECT artist_name,
AVG(popularity) AS average_popularity
FROM Spotifydata 
GROUP BY artist_name
)

SELECT  artist_name,
        average_popularity,
        'Top Star' AS tag
FROM popularity_average_CTE
WHERE average_popularity>=90
ORDER BY artist_name asc;
